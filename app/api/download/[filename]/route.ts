import { NextRequest } from 'next/server'

export async function GET(
  request: NextRequest,
  context: { params: Promise<{ filename: string }> }
) {
  try {
    const { filename } = await context.params
    
    // Check if it's a build file request
    if (filename && filename.startsWith('build-') && filename.endsWith('.apk')) {
      // Generate a mock APK file for demonstration
      const mockApkContent = `This is a mock APK file: ${filename}

In a real implementation, this would be:
1. A real APK file generated by EAS Build
2. Served from EAS Build servers  
3. Or from your own build artifact storage

Build completed on: ${new Date().toLocaleString()}

To get real APK files, you would:
- Set up EAS Build with: expo build:android
- Store build artifacts in cloud storage (AWS S3, etc.)
- Serve them through this endpoint

This is just a demo file to show the download flow works!
      `
      
      return new Response(mockApkContent, {
        headers: {
          'Content-Type': 'application/vnd.android.package-archive',
          'Content-Disposition': `attachment; filename="${filename}"`,
        }
      })
    }
    
    return new Response('File not found', { status: 404 })
  } catch (error) {
    console.error('Download APK error:', error)
    return new Response('Download failed', { status: 500 })
  }
} 